package org.example;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("PROYECTO FINAL METODOS NUMERICOS");
        System.out.println("Equipo: Alfa-Buena-Maravilla-Onda-Dinamita-Escuadro-Lobo");
        System.out.println("Integrantes:" +
                "\nEspinosa Salcedo Kevin Alexei" +
                "\nPeña Perez Miguel Angel" +
                "\nMadrid Murillo José Alejandro" +
                "\nGrupo: 1359");

        System.out.println("Seleccione alguno de los métodos iterativos \n");
        System.out.println("1.- Método de Gauss-Jordan");
        System.out.println("2.- Método de Gauss-Seidel");
        System.out.println("3.- Método de Jacobi");

        int methodChoice = scanner.nextInt();

        switch (methodChoice) {
            case 1:
                // Código para el Método de Gauss-Jordan
                break;
            case 2:
                executeGaussSeidel();
                break;
            case 3:
                executeJacobi();
                break;
            default:
                System.out.println("Opción no disponible");
        }
    }

    private static void executeGaussSeidel() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Ingrese la dimensión de la matriz: ");
        int dim = scanner.nextInt();
        double A[][] = new double[dim][dim];

        // Llena la matriz
        System.out.println("Ingrese la matriz de coeficientes (n x n):");
        for (int i = 0; i < dim; i++) {
            for (int j = 0; j < dim; j++) {
                A[i][j] = scanner.nextDouble();
            }
        }

        // Llena el vector de resultados (b)
        double b[] = new double[dim];
        System.out.println("Ingrese el vector b:");
        for (int i = 0; i < dim; i++) {
            b[i] = scanner.nextDouble();
        }

        double epsilon;
        System.out.print("Ingrese el criterio de detención (epsilon): ");
        epsilon = scanner.nextDouble();

        System.out.println("\nAproximando la solución del sistema de ecuaciones "
                + "por el Método de Gauss-Seidel... ");
        System.out.println("\nEl vector de aproximación inicial es [0, 0, 0, 0]\n");

        // Llama al método gauss_Seidel para resolver el sistema de ecuaciones
        Gauss_Seidel gaussSeidel = new Gauss_Seidel(A);
        double[] solution = gaussSeidel.gauss_Seidel(b, epsilon);

        // Imprime la solución
        System.out.println("Solución encontrada:");
        for (int i = 0; i < dim; i++) {
            System.out.println("x[" + (i + 1) + "]: " + solution[i]);
        }
    }

    private static void executeJacobi() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Ingrese la dimensión de la matriz: ");
        int dim = scanner.nextInt();
        double A[][] = new double[dim][dim];

        // Llena la matriz
        System.out.println("Ingrese la matriz de coeficientes (n x n):");
        for (int i = 0; i < dim; i++) {
            for (int j = 0; j < dim; j++) {
                A[i][j] = scanner.nextDouble();
            }
        }

        Jacobi jacobi = new Jacobi(A);

        // Llena el vector de resultados (b)
        double b[] = new double[dim];
        System.out.println("Ingrese el vector b:");
        jacobi.llenarVector(b);

        double epsilon;
        System.out.print("Ingrese el criterio de detención (epsilon): ");
        epsilon = scanner.nextDouble();

        System.out.println("\nAproximando la solución del sistema de ecuaciones "
                + "por el Método de Jacobi... ");
        System.out.println("\nEl vector de aproximación inicial es [0, 0, 0, 0]\n");

        // Llama al método jacobi para resolver el sistema de ecuaciones
        double[] solution = jacobi.jacobi(b, epsilon);

        // Imprime la solución
        System.out.println("Solución encontrada:");
        for (int i = 0; i < dim; i++) {
            System.out.println("x[" + (i + 1) + "]: " + solution[i]);
        }
    }
}
